import time
#from typing import Dict


class Character:
    def __init__(self):
        print('Введите имя для своего персонажа')
        self.name = input()
        self.strength = 0
        self.old_strength = 0
        self.agility = 0
        self.old_agility = 0
        self.intellect = 0
        self.old_intellect = 0
        self.hp = 100
        self.max_hp = 100
        self.old_hp = 100
        self.dmg = 10
        self.old_dmg = 10
        self.mp = 50
        self.max_mp = 50
        self.old_mp = 50
        self.amp_mag_dmg = 0
        self.old_amp_mag_dmg = 0
        self.armor = 0
        self.old_armor = 0
        self.mag_resist = 0.25
        self.old_mag_resist = 0
        self.lvl = 1
        self.points = 1
        self.skills = []
        self.name_list = []
        self.number_skill = 0

    def menu(self):
        a = False
        print('')
        print('МЕНЮ')
        print('Информация о персонаже:       1')
        print('Отправиться в путь:           2')
        print('Отдохнуть:                    3')
        if self.points > 0:
            a = True
            print('Поднять уровень:              4')
        choose = input()
        match choose:
            case '1':
                self.all_info()
            case '2':
                scenario_1()
            case '3':
                self.chill()
            case '4':
                if a:
                    self.lvl_up()
                else:
                    self.menu()
            case _:
                print('Неопознанная команда, возвращение в меню...')
                time.sleep(1)
                self.menu()


    def all_info(self):
        print('')
        print('Имя:', self.name)
        print('Уровень:                     ', self.lvl)
        print('Очки:                        ', self.points)
        print('Сила:                        ', self.strength)
        print('Ловкость:                    ', self.agility)
        print('Интеллект:                   ', self.intellect)
        print('Здоровье:                    ', self.hp)
        print('Урон:                        ', self.dmg)
        print('Мана:                        ', self.mp)
        print('Колдовство:                  ', self.amp_mag_dmg, '%')
        print('Броня:                       ', self.armor)
        print('Сопротивление магии:         ', self.mag_resist * 100, '%')
        print('Умения:                      ', self.skills)
        self.menu()

    def battle_info(self):
        print('Имя:', self.name)
        print('Здоровье:                    ', self.hp)
        print('Мана:                        ', self.mp)
        print('Броня:                       ', self.armor)

    def strength_bonus(self):
        if self.old_strength < self.strength:
            a = self.strength - self.old_strength
            self.max_hp += 10 * a
            self.mag_resist += 0.001 * a
            self.old_strength = self.strength

    def agility_bonus(self):
        if self.old_agility < self.agility:
            a = self.agility - self.old_agility
            self.dmg += 1 * a
            self.armor += 0.25 * a
            self.old_agility = self.agility

    def intellect_bonus(self):
        self.max_mp += 5 * self.intellect
        self.amp_mag_dmg += 0.5 * self.intellect

    def armor_impact(self):
        damage_reduction = ((0.05 * self.armor) / (1 + 0.05 * self.armor))
        # print('Physical damage reduction: ', damage_reduction, '%', sep='')
        return round(damage_reduction, 2)

    def change_attribute(self, attribute_name, value):
        match attribute_name:
            case 'strength':
                self.strength += value
                self.strength_bonus()
            case 'agility':
                self.agility += value
                self.agility_bonus()
            case 'intellect':
                self.intellect += value
                self.intellect_bonus()

    def calculate_max_hp(self):
        self.max_hp = 100
        self.max_hp += self.strength * 10
        return self.max_hp

    def calculate_max_mp(self):
        self.max_mp = 50
        self.max_mp += self.intellect * 5
        return self.max_mp

    def restoration(self):
        self.hp = self.calculate_max_hp()
        self.mp = self.calculate_max_mp()

    def chill(self):
        if self.hp == self.max_hp and self.mp == self.max_mp:
            print('\nВы чувствуете себя хорошо')
            self.menu()
        else:
            print('Вы решили немного покимарить', end='')
            for i in range(5):
                i += 1
                time.sleep(1)
                print('.', end='')
            self.restoration()
            print('\nВы чувствуете что хорошо отдохнули')
            self.menu()


    def lvl_up(self):
        increase = 10
        print('Какой атрибут вы желаете увеличить на {0} единиц?'.format(increase))
        print('                              1    Силу')
        print('                              2    Ловкость')
        print('                              3    Интеллект')
        print('                              4    ИНФО')
        choose = input()
        match choose:
            case '1':
                self.change_attribute('strength', increase)
                print('Сила увеличена на {0}!'.format(increase))
                self.points -= 1
                self.lvl += 1
                self.restoration()
            case '2':
                self.change_attribute('agility', increase)
                print('Ловкость увеличена на {0}!'.format(increase))
                self.points -= 1
                self.lvl += 1
                self.restoration()
            case '3':
                self.change_attribute('intellect', increase)
                print('Интеллект увеличен на {0}!'.format(increase))
                self.points -= 1
                self.lvl += 1
                self.restoration()
            case '4':
                print('Cила увеличивает живучесть и устойчивость к магии')
                print('Ловкость оттачивает ваши атаки и смягчает получаемые удары')
                print('Интеллект увеличивает запас маны и силу заклинаний')
                print()
                print('Введите что-нибудь для продолжения...')
                input()
                self.lvl_up()
            case _:
                print('Неопознанная команда, возвращение в меню...')
                time.sleep(1)
                self.menu()
        self.menu()
        #self.create_skill().new(person)

    # def create_skill(self):
    #     self.number_skill += 1
    #     exec('skill_%d = Skill()' %)
    #     return skills[self.number_skill - 1]

    # def create_skill(self):
    #     for i in range(5):
    #         self.number_skill += 1
    #         skills = [Skill(f"skill_{self.number_skill}")]
    #         print(skills[self.number_skill - 1].name)
    #         return skills[self.number_skill-1]

    def take_attack(self, attack):
        impact = attack - (attack * self.armor_impact())
        self.hp -= round(impact, 0)
        return round(impact, 0)


class Enemy:
    hp = 0
    dmg = 0
    mp = 0
    armor = 0
    mag_resist = 0

    def __init__(self, name):
        self.name = name
        match self.name:
            case 'goblin':
                self.hp = 50
                self.dmg = 5
                self.armor = 2
                self.mag_resist = 0.1
            case 'orc':
                self.hp = 200
                self.dmg = 15
                self.mp = 20
                self.mag_resist = 0.15

    def all_info(self):
        match self.name:
            case 'goblin':
                print('Гоблин:')
        print('Здоровье:                    ', self.hp)
        print('Урон:                        ', self.dmg)
        print('Мана:                        ', self.mp)
        print('Броня:                       ', self.armor)
        print('Сопротивление магии:         ', self.mag_resist * 100, '%')

    def battle_info(self):
        match self.name:
            case 'goblin':
                print('Гоблин:')
        print('Здоровье:                    ', self.hp)
        print('Мана:                        ', self.mp)
        print('Броня:                       ', self.armor)

    def armor_impact(self):
        damage_reduction = ((0.05 * self.armor) / (1 + 0.05 * self.armor))
        return round(damage_reduction, 2)

    def take_attack(self, attack):
        impact = attack - (attack * self.armor_impact())
        self.hp -= round(impact, 0)
        return round(impact, 0)


class Skill:
    #skills = {'stone_skin': StoneSkin}
    skill_list: dict[str, int] = {'duration_stone_skin_1': 3, 'reload_stone_skin_1': 5}
    name = 'not have'
    cost = 0
    def __init__(self, name):
        self.name = name

    # type = []
    # base_list = []
    # earth_list = []
    # water_list = []
    # fire_list = []
    # wind_list = []
    # lightning_list = []
    # life_list = []
    # matter_list = []
    # ice_list = []
    # destruction_list = []
    # light_list = []
    # dark_list = []
    # pure_list = []

    def new(self, person):
        print('Выберете способность для изучения')
        if person.lvl == 2:
            print('1 - Каменная кожа. 1ур')
            a = input()
            match a:
                case '1':
                    person.skills.append('Каменная кожа. 1ур')

    def StoneSkin_1(self, user):
        self.cost = 20
        if user.mp >= self.cost:
            user.mp -= self.cost
            user.armor += 4
            print('Вы покрыли себя камнем и потратили на это {0} маны'.format(self.cost))
            return self.skill_list.get('duration_stone_skin_1', 'reload_stone_skin_1')
        print('Не хватает маны')

    def UnStoneSkin_1(user):
        user.armor -= 4
        print("Каменная кожа утратила свою силу")

def check(timer):
    if sum(1 for i in timer.values())>0:
            for i in range(len(timer)):
                a = timer.get('duration')
                a -= 1
                if timer['duration'] > 0:
                    print('Оставшаяся длительность {0}: {1}'.format(i + 1, timer['duration']))
    if 0 in timer.values():
        print('Умение {0} перестало действовать'.format(timer.index(0) + 1))
        while timer.count(0) > 0:
            timer.remove(0)
            # match timer:
            #     case timer.index(skin_stone_1) = 0:
            #         Skill.UnStoneSkin_1(person)

def skill_number():
    skill_number = 2
    for key in person.skills:
        print('{0}          {1}'.format(skill_number, key))
        skill_number += 1

def battle(enemy):
    count = 1
    duration: dict[str, int] = dict()
    while enemy.hp > 0 and person.hp > 0:
        check(duration)
        print('Ход {0} как вы поступите?'.format(count))
        print('1            Атаковать')
        skill_number()
        choose = input()
        match choose:
            case '1':
                a = enemy.take_attack(person.dmg)
                print(enemy.name, 'получил', a, 'урона')
            case '2':
                duration = skill_1.StoneSkin_1(person)
            case _:
                continue
        b = person.take_attack(enemy.dmg)
        print('Вы получили', b, 'урона')
        person.battle_info()
        enemy.battle_info()
        count += 1
        if len(duration) > 0:
            print(duration)
    if enemy.hp < 0:
        print('\nВы победили!\n')
    else:
        print('\nВы проиграли, игра окончена...')
        time.sleep(5)
        exit()

def scenario_1():
    print('')
    # тут должна быть функция, вызывающего рандомного слабого врага. Пока просто гоблин
    easy_enemy_1 = Enemy('goblin')
    print('Вы встретили Гоблина', )
    easy_enemy_1.all_info()
    battle(easy_enemy_1)
    # динамическая функция награды за противника
    print('Вы встретили Гоблина', )
    easy_enemy_2 = Enemy('goblin')
    easy_enemy_2.all_info()
    battle(easy_enemy_2)
    print('После небольшого путешествия вы возвращаетесь домой')
    # функция хаба
    person.menu()

person = Character()
person.menu()
#person.create_skill()
#print(skill_1.name)
