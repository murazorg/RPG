# import time
from typing import Dict


class Character:
    def __init__(self):
        print('Введите имя для своего персонажа')
        self.name = input()
        self.strength = 0
        self.old_strength = 0
        self.agility = 0
        self.old_agility = 0
        self.intellect = 0
        self.old_intellect = 0
        self.hp = 100
        self.old_hp = 100
        self.dmg = 10
        self.old_dmg = 10
        self.mp = 50
        self.old_mp = 50
        self.amp_mag_dmg = 0
        self.old_amp_mag_dmg = 0
        self.armor = 0
        self.old_armor = 0
        self.mag_resist = 0.25
        self.old_mag_resist = 0
        self.lvl = 1
        self.points = 1
        self.skills = []

    def all_info(self):
        print('Имя:', self.name)
        print('Уровень:                     ', self.lvl)
        print('Очки:                        ', self.points)
        print('Сила:                        ', self.strength)
        print('Ловкость:                    ', self.agility)
        print('Интеллект:                   ', self.intellect)
        print('Здоровье:                    ', self.hp)
        print('Урон:                        ', self.dmg)
        print('Мана:                        ', self.mp)
        print('Колдовство:                  ', self.amp_mag_dmg, '%')
        print('Броня:                       ', self.armor)
        print('Сопротивление магии:         ', self.mag_resist, '%')
        print('Умения:                      ', self.skills)

    def info(self):
        print('Имя:', self.name)
        print('Здоровье:                    ', self.hp)
        print('Мана:                        ', self.mp)
        print('Броня:                       ', self.armor)

    def strength_bonus(self):
        if self.old_strength < self.strength:
            a = self.strength - self.old_strength
            self.hp += 10 * a
            self.mag_resist += 0.1 * a
            self.old_strength = self.strength

    def agility_bonus(self):
        if self.old_agility < self.agility:
            a = self.agility - self.old_agility
            self.dmg += 1 * a
            self.armor += 0.25 * a
            self.old_agility = self.agility

    def intellect_bonus(self):
        self.mp += 5 * self.intellect
        self.amp_mag_dmg += 0.2 * self.intellect

    def armor_impact(self):
        damage_reduction = ((0.05 * self.armor) / (1 + 0.05 * self.armor))
        # print('Physical damage reduction: ', damage_reduction, '%', sep='')
        return round(damage_reduction, 2)

    def lvl_up(self):
        print('Какой атрибут вы желаете увеличить на 5?')
        print('                 1    Силу')
        print('                 2    Ловкость')
        print('                 3    Интеллект')
        choose = input()
        match choose:
            case '1':
                self.strength += 5
                self.strength_bonus()
                self.points -= 1
                self.lvl += 1
            case '2':
                self.agility += 5
                self.agility_bonus()
                self.points -= 1
                self.lvl += 1
            case '3':
                self.intellect += 5
                self.intellect_bonus()
                self.points -= 1
                self.lvl += 1
            case _:
                return
        skill = Skill()
        skill.new(self)

    def take_attack(self, attack):
        impact = attack - (attack * self.armor_impact())
        self.hp -= round(impact, 0)
        self.old_hp = self.hp
        return round(impact, 0)


class Enemy:
    hp = 0
    dmg = 0
    mp = 0
    armor = 0
    mag_resist = 0

    def __init__(self, name):
        self.name = name
        match self.name:
            case 'goblin':
                self.hp = 50
                self.dmg = 5
                self.armor = 2
                self.mag_resist = 0.1
            case 'orc':
                self.hp = 200
                self.dmg = 15
                self.mp = 20
                self.mag_resist = 0.1

    def all_info(self):
        match self.name:
            case 'goblin':
                print('Гоблин:')
        print('Здоровье:                    ', self.hp)
        print('Урон:                        ', self.dmg)
        print('Мана:                        ', self.mp)
        print('Броня:                       ', self.armor)
        print('Сопротивление магии:         ', self.mag_resist, '%')

    def info(self):
        match self.name:
            case 'goblin':
                print('Гоблин:')
        print('Здоровье:                    ', self.hp)
        print('Мана:                        ', self.mp)
        print('Броня:                       ', self.armor)

    def armor_impact(self):
        damage_reduction = ((0.05 * self.armor) / (1 + 0.05 * self.armor))
        return round(damage_reduction, 2)

    def take_attack(self, attack):
        impact = attack - (attack * self.armor_impact())
        self.hp -= round(impact, 0)
        return round(impact, 0)


class Skill:
    def __init__(self):
        cost = 0
    stone_skin_1: dict[str, int] = dict(duration=3, reload=5)
    # type = []
    # base_list = []
    # earth_list = []
    # water_list = []
    # fire_list = []
    # wind_list = []
    # lightning_list = []
    # life_list = []
    # matter_list = []
    # ice_list = []
    # destruction_list = []
    # light_list = []
    # dark_list = []
    # pure_list = []

    def new(self, person):
        print('Выберете способность для изучения')
        if person.lvl == 2:
            print('1 - Каменная кожа. 1ур')
            a = input()
            match a:
                case '1':
                    person.skills.append('Каменная кожа. 1ур')

    def StoneSkin_1(user):
        skill = Skill()
        skill.cost = 20
        if user.mp >= skill.cost:
            user.mp -= skill.cost
            user.armor += 4
            print('Вы покрыли себя камнем и потратили на это {0} маны'.format(skill.cost))
            return Skill.stone_skin_1
        print('Не хватает маны')

    def UnStoneSkin_1(user):
        user.armor -= 4
        print("Каменная кожа утратила свою силу")

def check(timer):
    if 0 not in timer.values():
            for i in range(len(timer)):
                a = timer.get('duration')
                a -= 1
                if timer['duration'] > 0:
                    print('Оставшаяся длительность {0}: {1}'.format(i + 1, timer['duration']))
    if 0 in timer.values():
        print('Умение {0} перестало действовать'.format(timer.index(0) + 1))
        while timer.count(0) > 0:
            timer.remove(0)
            # match timer:
            #     case timer.index(skin_stone_1) = 0:
            #         Skill.UnStoneSkin_1(person)


def battle(enemy):
    count = 1
    duration: dict[str, int] = dict()
    while enemy.hp > 0 and person.hp > 0:
        check(duration)
        print('Ход {0} как вы поступите?'.format(count))
        print('1            Атаковать')
        skill_number = 2
        for key in person.skills:
            print('{0}          {1}'.format(skill_number, key))
            skill_number += 1
        choose = input()
        match choose:
            case '1':
                a = enemy.take_attack(person.dmg)
                print(enemy.name, 'получил', a, 'урона')
            case '2':
                duration = Skill.StoneSkin_1(person)
            case _:
                continue
        b = person.take_attack(enemy.dmg)
        print('Вы получили', b, 'урона')
        person.info()
        enemy.info()
        count += 1
        print(duration)


person = Character()
person.all_info()
person.lvl_up()
goblin_1 = Enemy('goblin')
print('')
goblin_1.all_info()
battle(goblin_1)
