import time
from copy import deepcopy
# from typing import Dict


class Character:
    def __init__(self):
        print('Введите имя для своего персонажа')
        self.name = input()
        self.strength = 0
        self.old_strength = 0  # Не используется
        self.agility = 0
        self.old_agility = 0  # Не используется
        self.intellect = 0
        self.old_intellect = 0  # Не используется
        self.hp = 100
        self.max_hp = 100
        self.old_hp = 100  # Не используется
        self.dmg = 10
        self.old_dmg = 10  # Не используется
        self.mp = 50
        self.max_mp = 50
        self.old_mp = 50  # Не используется
        self.amp_mag_dmg = 0
        self.old_amp_mag_dmg = 0  # Не используется
        self.armor = 0
        self.old_armor = 0  # Не используется
        self.mag_resist = 0.1
        self.old_mag_resist = 0  # Не используется
        self.lvl = 1
        self.points = 3
        # self.skills = []  # Не используется
        self.name_list = [False, False, False, False, False, False, False, False, False]
        self.number_skill = 0
        self.duration = [False, False, False, False, False, False, False, False, False]

    def menu(self):
        a = False
        print('')
        print('МЕНЮ')
        print('Информация о персонаже:       1')
        print('Отправиться в путь:           2')
        print('Отдохнуть:                    3')
        if self.points > 0:
            a = True
            print('Поднять уровень:              4')
        choose = input()
        match choose:
            case '1':
                self.all_info()
            case '2':
                scenario_1()
            case '3':
                self.chill()
            case '4':
                if a:
                    self.lvl_up()
                else:
                    self.menu()
            case _:
                print('Неопознанная команда, возвращение в меню...')
                time.sleep(1)
                self.menu()

    def print_skills(self):
        a = []
        for item in reversed(self.name_list[0:3]):
            if item:
                a.append(item)
                break
        for item in reversed(self.name_list[3:6]):
            if item:
                a.append(item)
                break
        return a

    def all_info(self):
        print('')
        print('Имя:', self.name)
        print('Уровень:                     ', self.lvl)
        print('Очки:                        ', self.points)
        print('Сила:                        ', self.strength)
        print('Ловкость:                    ', self.agility)
        print('Интеллект:                   ', self.intellect)
        print('Здоровье:                    ', self.hp)
        print('Урон:                        ', self.dmg)
        print('Мана:                        ', self.mp)
        print('Колдовство:                  ', self.amp_mag_dmg, '%')
        print('Броня:                       ', self.armor)
        print('Сопротивление магии:         ', round(self.mag_resist, 3) * 100, '%')
        print('Умения:                      ', self.print_skills())
        print('Все умения:             ', self.name_list)  # Откладка скиллов
        self.menu()

    def battle_info(self):
        print('\nИмя:', self.name)
        print('Здоровье:                    ', self.hp)
        print('Мана:                        ', self.mp)
        print('Броня:                       ', self.armor)
        print('Эффективность Брони:         ', self.armor_impact() * 100, '%')

    # def strength_bonus(self):
    #     if self.old_strength < self.strength:
    #         a = self.strength - self.old_strength
    #         self.max_hp += 10 * a
    #         self.mag_resist += 0.001 * a
    #         self.old_strength = self.strength

    # def agility_bonus(self):
    #     if self.old_agility < self.agility:
    #         a = self.agility - self.old_agility
    #         self.dmg += 1 * a
    #         self.armor += 0.25 * a
    #         self.old_agility = self.agility

    # def intellect_bonus(self):
    #     self.max_mp += 5 * self.intellect
    #     self.amp_mag_dmg += 0.5 * self.intellect

    def armor_impact(self):
        damage_reduction = ((0.05 * self.armor) / (1 + 0.05 * self.armor))
        # print('Physical damage reduction: ', damage_reduction, '%', sep='')  #- Для проверки формулы брони в бою
        return round(damage_reduction, 2)

    def change_attribute(self, attribute_name, value):
        match attribute_name:
            case 'strength':
                self.strength += value
                self.max_hp += 10 * value
                if self.hp > self.max_hp:
                    self.hp = self.max_hp
                self.mag_resist += round((0.001 * value), 3)
                # self.strength_bonus()
            case 'agility':
                self.agility += value
                self.dmg += 1 * value
                self.armor += 0.25 * value
                # self.agility_bonus()
            case 'intellect':
                self.intellect += value
                self.max_mp += 5 * value
                if self.mp > self.max_mp:
                    self.mp = self.max_mp
                self.amp_mag_dmg += 0.5 * value
                # self.intellect_bonus()

    def calculate_max_hp(self):
        self.max_hp = 100
        self.max_hp += self.strength * 10
        return self.max_hp

    def calculate_max_mp(self):
        self.max_mp = 50
        self.max_mp += self.intellect * 5
        return self.max_mp

    def restoration(self):
        self.hp = self.calculate_max_hp()
        self.mp = self.calculate_max_mp()

    def chill(self):
        if self.hp == self.max_hp and self.mp == self.max_mp:
            print('\nВы чувствуете себя хорошо')
            self.menu()
        else:
            print('Вы решили немного покимарить', end='')
            for i in range(5):
                i += 1
                time.sleep(1)
                print('.', end='')
            self.restoration()
            print('\nВы проснулись и чувствуете что хорошо отдохнули')
            self.menu()


    def lvl_up(self):
        increase = 5
        print('Какой атрибут вы желаете увеличить на {0} единиц?'.format(increase))
        print('                              1    Силу')
        print('                              2    Ловкость')
        print('                              3    Интеллект')
        print('                              4    ИНФО')
        choose = input()
        match choose:
            case '1':
                self.change_attribute('strength', increase)
                print('Сила увеличена на {0}!'.format(increase))
                self.points -= 1
                self.lvl += 1
                self.restoration()
            case '2':
                self.change_attribute('agility', increase)
                print('Ловкость увеличена на {0}!'.format(increase))
                self.points -= 1
                self.lvl += 1
                self.restoration()
            case '3':
                self.change_attribute('intellect', increase)
                print('Интеллект увеличен на {0}!'.format(increase))
                self.points -= 1
                self.lvl += 1
                self.restoration()
            case '4':
                print('Cила увеличивает живучесть и устойчивость к магии')
                print('Ловкость оттачивает ваши атаки и смягчает получаемые удары')
                print('Интеллект увеличивает запас маны и силу заклинаний')
                print()
                print('Введите что-нибудь для продолжения...')
                input()
                self.lvl_up()
            case _:
                print('Неопознанная команда, возвращение в меню...')
                time.sleep(1)
                self.menu()
        skill.new()
        self.menu()

    def take_attack(self, attack):
        impact = attack - (attack * self.armor_impact())
        self.hp -= round(impact, 0)
        return round(impact, 0)


class Enemy:
    hp = 0
    dmg = 0
    mp = 0
    armor = 0
    mag_resist = 0

    def __init__(self, name):
        self.name = name
        match self.name:
            case 'goblin':
                self.hp = 250
                self.dmg = 10
                self.mp = 0
                self.armor = 2
                self.mag_resist = 0.1
            case 'orc':
                self.hp = 200
                self.dmg = 15
                self.mp = 20
                self.armor = 8
                self.mag_resist = 0.15

    def all_info(self):
        match self.name:
            case 'goblin':
                print('Гоблин:')
        print('Здоровье:                    ', self.hp)
        print('Урон:                        ', self.dmg)
        print('Мана:                        ', self.mp)
        print('Броня:                       ', self.armor)
        print('Сопротивление магии:         ', self.mag_resist * 100, '%')

    def battle_info(self):
        match self.name:
            case 'goblin':
                print('\nГоблин:')
        print('Здоровье:                    ', self.hp)
        print('Мана:                        ', self.mp)
        print('Броня:                       ', self.armor)

    def armor_impact(self):
        damage_reduction = ((0.05 * self.armor) / (1 + 0.05 * self.armor))
        return round(damage_reduction, 2)

    def take_attack(self, attack):
        impact = attack - (attack * self.armor_impact())
        self.hp -= round(impact, 0)
        return round(impact, 0)

    def take_mag_attack(self, mag_attack: int):
        impact = (mag_attack * (1 + (person.amp_mag_dmg / 100))) * (1 - self.mag_resist)
        self.hp -= round(impact, 0)
        return round(impact, 0)


class Skill:
    def __init__(self):
    #     self.skills = \
    # {
    #     'stone_skin': self.StoneSkin, 'other_skill_1': 'method_other_skill_1',
    #     'other_skill_2': 'method_other_skill_2', 'earth_spike': self.EarthSpike
    # }
        self.time_list = \
            [
                [3, 5], [4, 5], [5, 5], [0, 1], [0, 1], [0, 1], [None], [None], [None]
            ]
        self.cost = 0

    # type = []
    # base_list = []
    # earth_list = []
    # water_list = []
    # fire_list = []
    # wind_list = []
    # lightning_list = []
    # life_list = []
    # matter_list = []
    # ice_list = []
    # destruction_list = []
    # light_list = []
    # dark_list = []
    # pure_list = []

    def new(self):
        print('\nВыберете аспект:')
        print('1                 Аспект Земли')
        match input():
            case '1':
                print('\nВыберете способность для изучения:')
                false_count = person.name_list[0:3].count(False)
                match false_count:
                    case 3:
                        print('1 - Каменная кожа. 1ур')
                    case 2:
                        print('1 - Каменная кожа. 2ур')
                    case 1:
                        print('1 - Каменная кожа. 3ур')
                false_count = person.name_list[3:6].count(False)
                match false_count:
                    case 3:
                        print('2 - Земляные шипы. 1ур')
                    case 2:
                        print('2 - Земляные шипы. 2ур')
                    case 1:
                        print('2 - Земляные шипы. 3ур')
                self.choose_skill('earth')

    def choose_skill(self, aspect):
        choice = input()
        match aspect:
            case 'earth':
                match choice:
                    case '1':
                        false_count = person.name_list[0:3].count(False)
                        match false_count:
                            case 3:
                                person.name_list[0] = 'Каменная кожа. 1ур'
                            case 2:
                                person.name_list[1] = 'Каменная кожа. 2ур'
                            case 1:
                                person.name_list[2] = 'Каменная кожа. 3ур'
                    case '2':
                        false_count = person.name_list[3:6].count(False)
                        match false_count:
                            case 3:
                                person.name_list[3] = 'Земляные шипы. 1ур'
                            case 2:
                                person.name_list[4] = 'Земляные шипы. 2ур'
                            case 1:
                                person.name_list[5] = 'Земляные шипы. 3ур'

    def mana_check(self, id_skill):
        match id_skill:
            case 0:
                self.cost = 20
                if person.mp >= self.cost:
                    return True
                else:
                    return False
            case 1:
                self.cost = 30
                if person.mp >= self.cost:
                    return True
                else:
                    return False
            case 2:
                self.cost = 40
                if person.mp >= self.cost:
                    return True
                else:
                    return False
            case 3:
                self.cost = 15
                if person.mp >= self.cost:
                    return True
                else:
                    return False
            case 4:
                self.cost = 30
                if person.mp >= self.cost:
                    return True
                else:
                    return False
            case 5:
                self.cost = 45
                if person.mp >= self.cost:
                    return True
                else:
                    return False

    def stone_skin(self):
        false_count = person.name_list[0:3].count(False)
        match false_count:
            case 2:
                if self.mana_check(0):
                    person.mp -= self.cost
                    person.armor += 4
                    print('Вы покрыли себя камнем и затратили на это {0} маны'.format(self.cost))
                    return self.time_list[0]
                else:
                    print('Не получилось прочесть заклинание')
                    return False
            case 1:
                if self.mana_check(1):
                    person.mp -= self.cost
                    person.armor += 8
                    print('Вы покрыли себя камнем и затратили на это {0} маны'.format(self.cost))
                    return self.time_list[1]
                else:
                    print('Не получилось прочесть заклинание')
                    return False
            case 0:
                if self.mana_check(2):
                    person.mp -= self.cost
                    person.armor += 12
                    print('Вы покрыли себя камнем и затратили на это {0} маны'.format(self.cost))
                    return self.time_list[2]
                else:
                    print('Не получилось прочесть заклинание')
                    return False

    def earth_spike(self, enemy):
        false_count = person.name_list[3:6].count(False)
        match false_count:
            case 2:
                if self.mana_check(3):
                    person.mp -= self.cost
                    dmg = enemy.take_mag_attack(25)
                    print('Земляные пики разверзлись под противником и нанесли ему {1} урона. '
                          'Вы затратили на это {0} маны'.format(self.cost, dmg))
                    return self.time_list[3]
                else:
                    print('Не получилось прочесть заклинание')
                    return False
            case 1:
                if self.mana_check(4):
                    person.mp -= self.cost
                    dmg = enemy.take_mag_attack(40)
                    print('Земляные пики разверзлись под противником и нанесли ему {1} урона. '
                          'Вы затратили на это {0} маны'.format(self.cost, dmg))
                    return self.time_list[4]
                else:
                    print('Не получилось прочесть заклинание')
                    return False
            case 0:
                if self.mana_check(5):
                    person.mp -= self.cost
                    dmg = enemy.take_mag_attack(55)
                    print('Земляные пики разверзлись под противником и нанесли ему {1} урона. '
                          'Вы затратили на это {0} маны'.format(self.cost, dmg))
                    return self.time_list[5]
                else:
                    print('Не получилось прочесть заклинание')
                    return False

    def dispell(self, user, skill_id):
        match skill_id:
            case 0:
                user.armor -= 4
            case 1:
                user.armor -= 8
            case 2:
                user.armor -= 12


def skill_id(skill_id):
    name = 'YOU ARE ABOBA'
    match skill_id:
        case 0 | 1 | 2:
            name = 'Каменная кожа'
    return name


def check(timer):
    for i in timer:
        if i:
            i[0] -= 1
            i[1] -= 1
            if i[0] > 0:
                print('Оставшаяся длительность {0}: {1}'.format(skill_id(timer.index(i)), i[0]))
            elif i[0] == 0:
                print('Умение {0} перестало действовать'.format(skill_id(timer.index(i))))
                skill.dispell(person, timer.index(i))
            elif i[1] == 0:
                print('Умение {0} снова доступно'.format(skill_id(timer.index(i))))
                index = timer.index(i)
                timer[index] = False
        continue


def skill_number():
    for item in reversed(person.name_list[0:3]):
        if item:  # Скилл изучен
            if person.duration[person.name_list.index(item)] is False:  # Его метод не применялся
                if skill.mana_check(person.name_list.index(item)):
                    print('                              1    {0}'.format(item))
                else:
                    print('Недостаточно маны!            1    {0}'.format(item))
                break
    for item in reversed(person.name_list[3:6]):
        if item:  # Скилл изучен
            if person.duration[person.name_list.index(item)] is False:  # Его метод не применялся
                if skill.mana_check(person.name_list.index(item)):
                    print('                              2    {0}'.format(item))
                else:
                    print('Недостаточно маны!            2    {0}'.format(item))
                break


def select_skill(enemy):
    skill_number()
    choose = input()
    match choose:
        case '1':
            person_move = skill.stone_skin()
            person.duration[0] = person_move
        case '2':
            person_move = skill.earth_spike(enemy)
            person.duration[3] = person_move
        case _:
            pass

def battle(enemy):
    count = 1
    person.duration = [False, False, False, False, False, False, False, False, False]
    while enemy.hp > 0 and person.hp > 0:
        skill.time_list = \
            [
                [3, 5], [4, 5], [5, 5], [0, 1], [0, 1], [0, 1], [None], [None], [None]
            ]
        check(person.duration)
        person.battle_info()
        enemy.battle_info()
        print('\nХод {0} как вы поступите?'.format(count))
        print('                              1    Атаковать')
        print('                              2    Использовать способность')
        choose = input()
        match choose:
            case '1':
                person_move = enemy.take_attack(person.dmg)
                print(enemy.name, 'получил', person_move, 'урона')
            case '2':
                select_skill(enemy)
            case _:
                continue
        b = person.take_attack(enemy.dmg)
        print('Вы получили', b, 'урона')
        count += 1
        if len(person.duration) > 0:  # Для откладки duration
            print(person.duration)
            print(skill.time_list)
    if enemy.hp < 0:
        print('\nВы победили!\n')
    else:
        print('\nВы проиграли, игра окончена...')
        time.sleep(5)
        exit()

def scenario_1():
    print('')
    # Здесь должна быть функция случайного слабого врага. Пока просто гоблин
    enemy = Enemy('goblin')
    print('Вы встретили Гоблина', )
    enemy.all_info()
    battle(enemy)
    # Здесь должна быть динамическая функция награды за противника
    print('Вы встретили Гоблина', )
    enemy = Enemy('goblin')
    enemy.all_info()
    battle(enemy)
    print('После небольшого путешествия вы возвращаетесь домой')
    # Здесь должна быть функция хаба
    person.menu()

enemy = Enemy('None')
skill = Skill()
person = Character()
person.menu()
